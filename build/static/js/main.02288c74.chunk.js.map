{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","imgUrl","className","style","width","src","alt","CardList","robots","map","el","i","key","SearchBox","searchfield","searchChange","htmlFor","arial-label","type","placeholder","onChange","Scroll","props","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","intialStateSearch","intialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"uWAoBeA,G,MAhBF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,GAAGC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,MAAoB,EAAbC,OAE5B,OAEI,yBAAKH,GAAIA,EAAII,UAAU,OAAOC,MAAO,CAACC,MAAO,UACzC,yBAAKC,IAAG,+BAA0BP,EAA1B,iBAA6CI,UAAU,eAAeI,IAAI,KAElF,yBAAKJ,UAAU,aACX,wBAAIA,UAAU,cAAcH,GAC5B,uBAAGG,UAAU,aAAaF,OCc3BO,G,MAtBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,yBAAKN,UAAU,mBAEPM,EAAOC,KAAK,SAACC,EAAIC,GACb,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLb,GAAIU,EAAOG,GAAGb,GACdC,KAAMS,EAAOG,GAAGZ,KAChBC,MAAOQ,EAAOG,GAAGX,MACjBC,OAAQO,EAAOG,GAAGV,eCK/BY,G,MAlBG,SAAC,GAAiC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC9B,OACI,yBAAKb,UAAU,mBACX,2BAAOc,QAAQ,eAAed,UAAU,gBAAxC,mBACA,2BACIJ,GAAG,eACHmB,cAAY,gBACZf,UAAU,eACVgB,KAAK,SACLC,YAAY,gBACZC,SAAYL,OCFbM,EATA,SAACC,GACZ,OAEI,yBAAKnB,MAAO,CAACoB,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEH,EAAMI,WCiBJC,E,kDApBX,WAAYL,GAAO,IAAD,8BACd,cAAMA,IACDM,MAAQ,CACTC,UAAU,GAHA,E,8DAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAW,M,+BAI1B,OAAGG,KAAKJ,MAAMC,SACH,6DAGJG,KAAKV,MAAMI,a,GAjBCQ,aCyBrBC,G,wLAIEH,KAAKV,MAAMc,oB,+BAOL,IAAD,EAE6DJ,KAAKV,MAA/De,EAFH,EAEGA,YAAcC,EAFjB,EAEiBA,eAAgB9B,EAFjC,EAEiCA,OAAQ+B,EAFzC,EAEyCA,UACxCC,GAHD,EAEoDV,MAClCtB,EAAOiC,QAAQ,SAAAC,GAClC,OAAOA,EAAM3C,KAAK4C,cAAcC,SAASP,EAAYM,mBAEzD,OAAIJ,EACO,uCAGH,yBAAKrC,UAAU,aACX,wBAAIA,UAAU,eAAd,eACA,kBAAC,EAAD,CAAWa,aAAcuB,IACzB,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU9B,OAAQgC,W,GA1B5BN,cA2CHW,eA5DS,SAAAjB,GACpB,MAAO,CACHS,YAAaT,EAAMkB,aAAaT,YAChC7B,OAAQoB,EAAMmB,cAAcvC,OAC5B+B,UAAWX,EAAMmB,cAAcR,UAC/BT,MAAOF,EAAMmB,cAAcjB,UAIR,SAACkB,GACxB,MAAO,CACHV,eAAgB,SAACW,GAAD,OAAWD,ECdM,CACrC9B,KCR+B,sBDS/BgC,QDYuDD,EAAME,OAAOC,SAChEhB,gBAAiB,kBCVI,SAACY,GAC1BA,EAAU,CAAE9B,KCZsB,2BDalCmC,MAAM,8CACDC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAK,SAAAG,GAAI,OAAIT,EAAS,CAAE9B,KCdK,yBDcyBgC,QAASO,OAC/DC,OAAM,SAAA5B,GAAK,OAAIkB,EAAS,CAAE9B,KCdE,wBDc4BgC,QAASpB,ODK3CiB,CAAcC,OAgD9BH,CAA6CV,GG1DtDwB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTZ,MAAK,SAAAiB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7C,QACfwC,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5Bb,OAAM,SAAA5B,GACL+C,QAAQ/C,MAAM,4CAA6CA,M,UCzF3DmD,EAAoB,CACtB5C,YAAa,IAYX6C,EAAoB,CACtB3C,WAAW,EACX/B,OAAQ,GACRsB,MAAO,ICVLqD,EAASC,yBACTC,EAAcC,YAAgB,CAACxC,aDHT,WAAyC,IAAxClB,EAAuC,uDAAjCqD,EAAmBM,EAAc,uDAAP,GACzD,OAAOA,EAAOrE,MACV,IFb2B,sBEcvB,OAAOsE,OAAOC,OAAO,GAAI7D,EAAO,CAACS,YAAYkD,EAAOrC,UACxD,QACI,OAAOtB,ICFgCmB,cDWtB,WAAyC,IAAxCnB,EAAuC,uDAAjCsD,EAAmBK,EAAc,uDAAP,GAC1D,OAAOA,EAAOrE,MACV,IF1B8B,yBE2B1B,OAAOsE,OAAOC,OAAO,GAAI7D,EAAO,CAAEW,WAAW,IACjD,IF3B8B,yBE4B1B,OAAOiD,OAAOC,OAAO,GAAI7D,EAAO,CAAEpB,OAAS+E,EAAOrC,QAASX,WAAW,IAC1E,IF5B6B,wBE6BzB,OAAOiD,OAAOC,OAAO,GAAI7D,EAAO,CAACE,MAAOyD,EAAOrC,QAASX,WAAW,IACvE,QAAS,OAAOX,MClBlB8D,EAAQC,YAAYN,EAAaO,YAAgBC,IAAiBV,IAExEW,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,QAIJO,SAASC,eAAe,SFFnB,SAAkB/B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI+B,IAAIC,gBAAwBvC,OAAOC,SAASuC,MACpDC,SAAWzC,OAAOC,SAASwC,OAIvC,OAGFzC,OAAO0C,iBAAiB,QAAQ,WAC9B,IAAMrC,EAAK,UAAMkC,gBAAN,sBAEPzC,IAgEV,SAAiCO,EAAOC,GAEtCd,MAAMa,EAAO,CACXsC,QAAS,CAAE,iBAAkB,YAE5BlD,MAAK,SAAAC,GAEJ,IAAMkD,EAAclD,EAASiD,QAAQE,IAAI,gBAEnB,MAApBnD,EAASoD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CxC,UAAUC,cAAcwC,MAAMvD,MAAK,SAAAiB,GACjCA,EAAauC,aAAaxD,MAAK,WAC7BO,OAAOC,SAASiD,eAKpB9C,EAAgBC,EAAOC,MAG1BT,OAAM,WACLmB,QAAQC,IACN,oEAvFAkC,CAAwB9C,EAAOC,GAI/BC,UAAUC,cAAcwC,MAAMvD,MAAK,WACjCuB,QAAQC,IACN,iHAMJb,EAAgBC,EAAOC,OEpB/BE,K","file":"static/js/main.02288c74.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Card.css';\r\n\r\nconst Card = ( {id,name, email, imgUrl }) => {\r\n    \r\n    return (\r\n        \r\n        <div id={id} className=\"card\" style={{width: '15rem'}}>\r\n            <img src={`https://robohash.org/${id}?size=200x200`} className=\"card-img-top\" alt=\"\">\r\n            </img>\r\n            <div className=\"card-body\">\r\n                <h2 className=\"card-title\">{name}</h2>\r\n                <p className=\"card-text\">{email}</p>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nimport './CardList.css';\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div className=\"robotsContainer\" >\r\n            {\r\n                robots.map( (el, i) => {\r\n                    return (\r\n                        <Card \r\n                            key={i} \r\n                            id={robots[i].id} \r\n                            name={robots[i].name} \r\n                            email={robots[i].email} \r\n                            imgUrl={robots[i].imgUrl}\r\n                        />\r\n                    );\r\n                    \r\n                })   \r\n            }   \r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './SearchBox.css';\r\n\r\nconst SearchBox = ({ searchfield, searchChange}) => {\r\n    return (\r\n        <div className='input_container'>\r\n            <label htmlFor='search-input' className='serach-label'>Search Robots: </label>\r\n            <input\r\n                id='search-input'\r\n                arial-label='Search Robots' \r\n                className='form-control' \r\n                type='search' \r\n                placeholder='search robots'\r\n                onChange = {searchChange} \r\n            />\r\n        \r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        \r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError : true })\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError) {\r\n            return <h1>Ooooops, Something goes wrong</h1>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => requestRobots(dispatch)\r\n    }\r\n}\r\n\r\n\r\nclass App extends Component {\r\n   \r\n    componentDidMount(){\r\n        //console.log(this.props.store.getState());\r\n        this.props.onRequestRobots();\r\n        \r\n        //console.log('check');\r\n        //this.setState({robots: robots});\r\n    }\r\n\r\n    \r\n    render (){\r\n      \r\n        const { searchField , onSearchChange, robots, isPending, error} = this.props;\r\n        const filteredRobots = robots.filter( robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        });\r\n        if( isPending ){\r\n            return <h1>Loading</h1>\r\n        }else {\r\n            return (\r\n                <div className=\"container\">\r\n                    <h1 className=\"text-center\">RoboFriends</h1>\r\n                    <SearchBox searchChange={onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobots}/>\r\n                        </ErrorBoundary>\r\n                        \r\n                    </Scroll>\r\n                    \r\n                </div>\r\n               \r\n            \r\n            );\r\n        }\r\n        //console.log(filteredRobots);\r\n        \r\n\r\n    }\r\n    \r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED \r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = (dispatch) => {\r\n    dispatch( { type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then( response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(error => dispatch({ type : REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED  \r\n\r\n} from './constants';\r\nconst intialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=intialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField:action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst intialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\nexport const requestRobots = (state=intialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots : action.payload, isPending: false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false});\r\n        default: return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport  { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\n\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}