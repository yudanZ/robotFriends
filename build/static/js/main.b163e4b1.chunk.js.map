{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","imgUrl","className","style","width","src","alt","CardList","robots","map","el","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"gUAmBeA,G,MAhBF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,GAAGC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,MAAoB,EAAbC,OAE5B,OAEI,yBAAKH,GAAIA,EAAII,UAAU,QAAQC,MAAO,CAACC,MAAO,UAC1C,yBAAKC,IAAK,wBAA0BP,EAAII,UAAU,eAAeI,IAAI,KAErE,yBAAKJ,UAAU,aACX,wBAAIA,UAAU,cAAcH,GAC5B,uBAAGG,UAAU,aAAaF,OCe3BO,G,MAtBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,yBAAKN,UAAU,mBAEPM,EAAOC,KAAK,SAACC,EAAIC,GACb,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLb,GAAIU,EAAOG,GAAGb,GACdC,KAAMS,EAAOG,GAAGZ,KAChBC,MAAOQ,EAAOG,GAAGX,MACjBC,OAAQO,EAAOG,GAAGV,eCC/BY,G,MAdG,SAAC,GAAiC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC9B,OACI,yBAAKb,UAAU,mBACX,2BACIA,UAAU,eACVc,KAAK,SACLC,YAAY,gBACZC,SAAYH,OCCbI,EATA,SAACC,GACZ,OAEI,yBAAKjB,MAAO,CAACkB,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEH,EAAMI,WCiBJC,E,kDApBX,WAAYL,GAAO,IAAD,8BACd,cAAMA,IACDM,MAAQ,CACTC,UAAU,GAHA,E,8DAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAW,M,+BAI1B,OAAGG,KAAKJ,MAAMC,SACH,6DAGJG,KAAKV,MAAMI,a,GAjBCQ,aCiEZC,G,wDAxDX,aAAc,IAAD,8BACT,gBAmBJC,eAAiB,SAACC,GAEd,EAAKJ,SAAS,CAACjB,YAAaqB,EAAMC,OAAOC,SApBzC,EAAKX,MAAQ,CACTlB,OAAQ,GACRM,YAAa,IAJR,E,gEAOO,IAAD,OACfwB,MAAM,8CAA8CC,MAAM,SAAAC,GACtD,OAAOA,EAASC,UAEnBF,MAAM,SAAAG,GACH,EAAKX,SAAS,CAACvB,OAAQkC,S,+BAarB,IAAD,EAC2BZ,KAAKJ,MAA7BlB,EADH,EACGA,OAAQM,EADX,EACWA,YACV6B,EAAiBnC,EAAOoC,QAAQ,SAAAC,GAClC,OAAOA,EAAM9C,KAAK+C,cAAcC,SAASjC,EAAYgC,kBAEzD,OAAKtC,EAAOwC,OAIJ,yBAAK9C,UAAU,aACX,wBAAIA,UAAU,eAAd,eACA,kBAAC,EAAD,CAAWa,aAAce,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU1B,OAAQmC,OAR3B,2C,GAhCDX,cCEEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,c","file":"static/js/main.b163e4b1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = ( {id,name, email, imgUrl }) => {\r\n    \r\n    return (\r\n        \r\n        <div id={id} className=\"card \" style={{width: '15rem'}}>\r\n            <img src={'https://robohash.org/' + id} className=\"card-img-top\" alt=\"\">\r\n            </img>\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">{name}</h5>\r\n                <p className=\"card-text\">{email}</p>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nimport './CardList.css';\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div className=\"robotsContainer\" >\r\n            {\r\n                robots.map( (el, i) => {\r\n                    return (\r\n                        <Card \r\n                            key={i} \r\n                            id={robots[i].id} \r\n                            name={robots[i].name} \r\n                            email={robots[i].email} \r\n                            imgUrl={robots[i].imgUrl}\r\n                        />\r\n                    );\r\n                    \r\n                })   \r\n            }   \r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './SearchBox.css';\r\n\r\nconst SearchBox = ({ searchfield, searchChange}) => {\r\n    return (\r\n        <div className='input_container'>\r\n            <input \r\n                className='form-control' \r\n                type='search' \r\n                placeholder='search robots'\r\n                onChange = {searchChange} \r\n            />\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        \r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError : true })\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError) {\r\n            return <h1>Ooooops, Something goes wrong</h1>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\n\r\n\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users').then( response => {\r\n            return response.json();\r\n        })\r\n        .then( users => {\r\n            this.setState({robots: users});\r\n        })\r\n\r\n        \r\n        //console.log('check');\r\n        //this.setState({robots: robots});\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        //console.log(event.target.value);\r\n        this.setState({searchfield: event.target.value});\r\n        \r\n    }\r\n    render (){\r\n        const { robots, searchfield } = this.state;\r\n        const filteredRobots = robots.filter( robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n        });\r\n        if( !robots.length ){\r\n            return <h1>Loading</h1>\r\n        }else {\r\n            return (\r\n                <div className=\"container\">\r\n                    <h1 className=\"text-center\">RoboFriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobots}/>\r\n                        </ErrorBoundary>\r\n                        \r\n                    </Scroll>\r\n                    \r\n                </div>\r\n               \r\n            \r\n            );\r\n        }\r\n        //console.log(filteredRobots);\r\n        \r\n\r\n    }\r\n    \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}