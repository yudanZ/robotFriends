{"ast":null,"code":"import _classCallCheck from\"E:\\\\yudan\\\\robotFriends\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"E:\\\\yudan\\\\robotFriends\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"E:\\\\yudan\\\\robotFriends\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"E:\\\\yudan\\\\robotFriends\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{connect}from'react-redux';import CardList from'../components/CardList';import SearchBox from'../components/SearchBox';import Scroll from'../components/Scroll';import ErrorBoundary from'../components/ErrorBoundry';import'./App.css';import{setSearchField,requestRobots}from'../actions';var mapStateToProps=function mapStateToProps(state){return{searchField:state.searchRobots.searchField,robots:state.requestRobots.robots,isPending:state.requestRobots.isPending,error:state.requestRobots.error};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{onSearchChange:function onSearchChange(event){return dispatch(setSearchField(event.target.value));},onRequestRobots:function onRequestRobots(){return requestRobots(dispatch);}};};var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);var _super=_createSuper(App);function App(){_classCallCheck(this,App);return _super.apply(this,arguments);}_createClass(App,[{key:\"componentDidMount\",value:function componentDidMount(){//console.log(this.props.store.getState());\nthis.props.onRequestRobots();//console.log('check');\n//this.setState({robots: robots});\n}},{key:\"render\",value:function render(){var _this$props=this.props,searchField=_this$props.searchField,onSearchChange=_this$props.onSearchChange,robots=_this$props.robots,isPending=_this$props.isPending,error=_this$props.error;var filteredRobots=robots.filter(function(robot){return robot.name.toLowerCase().includes(searchField.toLowerCase());});if(isPending){return/*#__PURE__*/React.createElement(\"h1\",null,\"Loading\");}else{return/*#__PURE__*/React.createElement(\"div\",{className:\"container\"},/*#__PURE__*/React.createElement(\"h1\",{className:\"text-center\"},\"RoboFriends\"),/*#__PURE__*/React.createElement(SearchBox,{searchChange:onSearchChange}),/*#__PURE__*/React.createElement(Scroll,null,/*#__PURE__*/React.createElement(ErrorBoundary,null,/*#__PURE__*/React.createElement(CardList,{robots:filteredRobots}))));}//console.log(filteredRobots);\n}}]);return App;}(Component);export default connect(mapStateToProps,mapDispatchToProps)(App);","map":{"version":3,"sources":["E:/yudan/robotFriends/src/containers/App.js"],"names":["React","Component","connect","CardList","SearchBox","Scroll","ErrorBoundary","setSearchField","requestRobots","mapStateToProps","state","searchField","searchRobots","robots","isPending","error","mapDispatchToProps","dispatch","onSearchChange","event","target","value","onRequestRobots","App","props","filteredRobots","filter","robot","name","toLowerCase","includes"],"mappings":"4jBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,MAAOC,CAAAA,QAAP,KAAqB,wBAArB,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CACA,MAAOC,CAAAA,MAAP,KAAmB,sBAAnB,CACA,MAAOC,CAAAA,aAAP,KAA0B,4BAA1B,CACA,MAAO,WAAP,CAEA,OAASC,cAAT,CAAyBC,aAAzB,KAA8C,YAA9C,CAEA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAAAC,KAAK,CAAI,CAC7B,MAAO,CACHC,WAAW,CAAED,KAAK,CAACE,YAAN,CAAmBD,WAD7B,CAEHE,MAAM,CAAEH,KAAK,CAACF,aAAN,CAAoBK,MAFzB,CAGHC,SAAS,CAAEJ,KAAK,CAACF,aAAN,CAAoBM,SAH5B,CAIHC,KAAK,CAAEL,KAAK,CAACF,aAAN,CAAoBO,KAJxB,CAAP,CAMH,CAPD,CASA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,QAAD,CAAc,CACrC,MAAO,CACHC,cAAc,CAAE,wBAACC,KAAD,QAAWF,CAAAA,QAAQ,CAACV,cAAc,CAACY,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf,CAAnB,EADb,CAEHC,eAAe,CAAE,iCAAMd,CAAAA,aAAa,CAACS,QAAD,CAAnB,EAFd,CAAP,CAIH,CALD,C,GAQMM,CAAAA,G,qPAEiB,CACf;AACA,KAAKC,KAAL,CAAWF,eAAX,GAEA;AACA;AACH,C,uCAGQ,iBAE6D,KAAKE,KAFlE,CAEGb,WAFH,aAEGA,WAFH,CAEiBO,cAFjB,aAEiBA,cAFjB,CAEiCL,MAFjC,aAEiCA,MAFjC,CAEyCC,SAFzC,aAEyCA,SAFzC,CAEoDC,KAFpD,aAEoDA,KAFpD,CAGL,GAAMU,CAAAA,cAAc,CAAGZ,MAAM,CAACa,MAAP,CAAe,SAAAC,KAAK,CAAI,CAC3C,MAAOA,CAAAA,KAAK,CAACC,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCnB,WAAW,CAACkB,WAAZ,EAAlC,CAAP,CACH,CAFsB,CAAvB,CAGA,GAAIf,SAAJ,CAAe,CACX,mBAAO,wCAAP,CACH,CAFD,IAEM,CACF,mBACI,2BAAK,SAAS,CAAC,WAAf,eACI,0BAAI,SAAS,CAAC,aAAd,gBADJ,cAEI,oBAAC,SAAD,EAAW,YAAY,CAAEI,cAAzB,EAFJ,cAGI,oBAAC,MAAD,mBACI,oBAAC,aAAD,mBACI,oBAAC,QAAD,EAAU,MAAM,CAAEO,cAAlB,EADJ,CADJ,CAHJ,CADJ,CAeH,CACD;AAGH,C,iBAvCaxB,S,EA2ClB,cAAeC,CAAAA,OAAO,CAACO,eAAD,CAAkBO,kBAAlB,CAAP,CAA6CO,GAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => requestRobots(dispatch)\r\n    }\r\n}\r\n\r\n\r\nclass App extends Component {\r\n   \r\n    componentDidMount(){\r\n        //console.log(this.props.store.getState());\r\n        this.props.onRequestRobots();\r\n        \r\n        //console.log('check');\r\n        //this.setState({robots: robots});\r\n    }\r\n\r\n    \r\n    render (){\r\n      \r\n        const { searchField , onSearchChange, robots, isPending, error} = this.props;\r\n        const filteredRobots = robots.filter( robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        });\r\n        if( isPending ){\r\n            return <h1>Loading</h1>\r\n        }else {\r\n            return (\r\n                <div className=\"container\">\r\n                    <h1 className=\"text-center\">RoboFriends</h1>\r\n                    <SearchBox searchChange={onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobots}/>\r\n                        </ErrorBoundary>\r\n                        \r\n                    </Scroll>\r\n                    \r\n                </div>\r\n               \r\n            \r\n            );\r\n        }\r\n        //console.log(filteredRobots);\r\n        \r\n\r\n    }\r\n    \r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);"]},"metadata":{},"sourceType":"module"}