{"ast":null,"code":"import{CHANGE_SEARCH_FIELD,REQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCESS,REQUEST_ROBOTS_FAILED}from'./constants';export var setSearchField=function setSearchField(text){return{type:CHANGE_SEARCH_FIELD,payload:text};};export var requestRobots=function requestRobots(dispatch){dispatch({type:REQUEST_ROBOTS_PENDING});fetch('https://jsonplaceholder.typicode.com/users').then(function(response){return response.json();}).then(function(data){return dispatch({type:REQUEST_ROBOTS_SUCCESS,payload:data});}).catch(function(error){return dispatch({type:REQUEST_ROBOTS_FAILED,payload:error});});};","map":{"version":3,"sources":["E:/yudan/robotFriends/src/actions.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","setSearchField","text","type","payload","requestRobots","dispatch","fetch","then","response","json","data","catch","error"],"mappings":"AAAA,OACIA,mBADJ,CAEIC,sBAFJ,CAGIC,sBAHJ,CAIIC,qBAJJ,KAKO,aALP,CAOA,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,IAAD,QAAW,CACrCC,IAAI,CAAEN,mBAD+B,CAErCO,OAAO,CAAEF,IAF4B,CAAX,EAAvB,CAKP,MAAO,IAAMG,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,QAAD,CAAc,CACvCA,QAAQ,CAAE,CAAEH,IAAI,CAAEL,sBAAR,CAAF,CAAR,CACAS,KAAK,CAAC,4CAAD,CAAL,CACKC,IADL,CACW,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAT,EAAJ,EADnB,EAEKF,IAFL,CAEU,SAAAG,IAAI,QAAIL,CAAAA,QAAQ,CAAC,CAAEH,IAAI,CAAEJ,sBAAR,CAAgCK,OAAO,CAAEO,IAAzC,CAAD,CAAZ,EAFd,EAGKC,KAHL,CAGW,SAAAC,KAAK,QAAIP,CAAAA,QAAQ,CAAC,CAAEH,IAAI,CAAGH,qBAAT,CAAgCI,OAAO,CAAES,KAAzC,CAAD,CAAZ,EAHhB,EAIH,CANM","sourcesContent":["import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED \r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = (dispatch) => {\r\n    dispatch( { type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then( response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(error => dispatch({ type : REQUEST_ROBOTS_FAILED, payload: error}))\r\n}"]},"metadata":{},"sourceType":"module"}